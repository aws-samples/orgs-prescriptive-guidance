# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

---
AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "DO NOT DELETE - AWS Organization"

Parameters:
  pInstanceArn:
    Type: String
    Description: AWS Identity Center Center Instance ARN
    Default: ""
  pDeveloperPrefix:
    Type: String
    Description: Required prefix for self-service IAM roles and CloudFormation stacks
    Default: app
    ConstraintDescription: "must only contain lowercase letters and numbers"
    AllowedPattern: "[a-z0-9]+"
    MinLength: 1
  pCloudFormationRoleName:
    Type: String
    Description: CloudFormation IAM role name
    Default: CloudFormationRole
    ConstraintDescription: "must only contain uppercase and lowercase letters and numbers"
    AllowedPattern: "[a-zA-Z0-9]+"
    MinLength: 1
  pServiceCatalogRoleName:
    Type: String
    Description: Service Catalog IAM role name
    Default: ServiceCatalogRole
    ConstraintDescription: "must only contain uppercase and lowercase letters and numbers"
    AllowedPattern: "[a-zA-Z0-9]+"
    MinLength: 1
  pRegions:
    Type: CommaDelimitedList
    Description: Comma-delimited list of regions to deploy the stacksets
    Default: us-east-1
  pSandboxOuName:
    Type: String
    Description: Organizational Unit (OU) for sandbox accounts
    Default: Sandbox
  pSecurityOuName:
    Type: String
    Description: Organizational Unit (OU) for security accounts
    Default: Security_Prod
  pGithubOrganization:
    Type: String
    Description: GitHub Organization or User

Conditions:
  cHasInstanceArn: !Not [!Equals [!Ref pInstanceArn, ""]]

Resources:
  rOrganization:
    Type: "AWS::Organizations::Organization"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      FeatureSet: ALL

  rOrganizationPolicy:
    Type: "AWS::Organizations::ResourcePolicy"
    Properties:
      Content:
        Version: "2012-10-17"
        Statement:
          - Sid: DelegatingDescribeListActions
            Effect: Allow
            Principal: "*"
            Action:
              - "organizations:List*"
              - "organizations:Describe*"
            Resource: "*"
            Condition:
              StringEquals:
                "aws:PrincipalOrgID": !GetAtt rOrganization.Id

  rRootServicePolicy:
    Type: "AWS::Organizations::Policy"
    DependsOn: rActivateCustomResource
    Properties:
      Content:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyRootUserActions
            Effect: Deny
            Action: "*"
            Resource: "*"
            Condition:
              ArnLike:
                "aws:PrincipalArn": !Sub "arn:${AWS::Partition}:iam::*:root"
              "Null":
                "aws:AssumedRoot": "true"
          - Sid: DenyLeaveOrganization
            Effect: Deny
            Action: "organizations:LeaveOrganization"
            Resource: "*"
          - Sid: DenyAccountClosure
            Effect: Deny
            Action:
              - "organizations:CloseAccount"
              - "account:CloseAccount"
            Resource: "*"
      Description: Deny Root User Actions, Leaving Organization, and Account Closure
      Name: RootPolicy
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rRootServicePolicy
      TargetIds:
        - !GetAtt rOrganization.RootId
      Type: SERVICE_CONTROL_POLICY
  
  rRootResourcePolicy:
    Type: "AWS::Organizations::Policy"
    DependsOn: rActivateCustomResource
    Properties:
      Content:
        Version: "2012-10-17"
        Statement:
          - Sid: EnforceOrgIdentities
            Effect: Deny
            Principal: "*"
            Action:
              - "s3:*"
              - "sqs:*"
              - "kms:*"
              - "secretsmanager:*"
              - "sts:AssumeRole"
              - "sts:DecodeAuthorizationMessage"
              - "sts:GetAccessKeyInfo"
              - "sts:GetFederationToken"
              - "sts:GetServiceBearerToken"
              - "sts:GetSessionToken"
              - "sts:SetContext"
            Resource: "*"
            Condition:
              StringNotEqualsIfExists:
                "aws:PrincipalOrgID": !GetAtt rOrganization.Id
                "aws:ResourceTag/dp:exclude:identity": "true"
              BoolIfExists:
                "aws:PrincipalIsAWSService": "false"
          - Sid: EnforceConfusedDeputyProtection
            Effect: Deny
            Principal: "*"
            Action:
              - "s3:*"
              - "sqs:*"
              - "kms:*"
              - "secretsmanager:*"
              - "sts:*"
            Resource: "*"
            Condition:
              StringNotEqualsIfExists:
                "aws:PrincipalOrgID": !GetAtt rOrganization.Id
                "aws:ResourceTag/dp:exclude:identity": "true"
              "Null":
                "aws:SourceAccount": "false"
              "Bool":
                "aws:PrincipalIsAWSService": "true"
          - Sid: EnforceSecureTransport
            Effect: Deny
            Principal: "*"
            Action:
              - "s3:*"
              - "sqs:*"
              - "kms:*"
              - "secretsmanager:*"
              - "sts:*"
            Resource: "*"
            Condition:
              BoolIfExists:
                "aws:SecureTransport": "false"
          - Sid: ProtectDataPerimeterSessionTags
            Effect: Deny
            Principal: "*"
            Action: "sts:TagSession"
            Resource: "*"
            Condition:
              "Null":
                "SAML:aud": "true"
              StringNotEqualsIfExists:
                "aws:PrincipalTag/team": admin
                "aws:PrincipalOrgID": !GetAtt rOrganization.Id
              "ForAnyValue:StringLike":
                "aws:TagKeys":
                  - "dp:*"
                  - team
      Description: Enforce resource perimeter
      Name: RootPolicy
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rRootResourcePolicy
      TargetIds:
        - !GetAtt rOrganization.RootId
      Type: RESOURCE_CONTROL_POLICY
  
  rTrustedOIDCTenantsPolicy:
    Type: "AWS::Organizations::Policy"
    DependsOn: rActivateCustomResource
    Properties:
      Content:
        Version: "2012-10-17"
        Statement:
          - Sid: EnforceTrustedOIDCTenants
            Effect: Deny
            Principal: "*"
            Action: "sts:AssumeRoleWithWebIdentity"
            Resource: "*"
            Condition:
              StringNotLikeIfExists:
                "token.actions.githubusercontent.com:sub": !Sub "repo:${pGithubOrganization}/*"
                "aws:ResourceTag/dp:exclude:identity": "true"
              "Null":
                "token.actions.githubusercontent.com:sub": "false"
      Description: Limit access to trusted OIDC identity providers
      Name: TrustedOIDCProvidersPolicy
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rTrustedOIDCTenantsPolicy
      TargetIds:
        - !GetAtt rOrganization.RootId
      Type: RESOURCE_CONTROL_POLICY

  rRootDeclarativePolicyEC2:
    Type: "AWS::Organizations::Policy"
    DependsOn: rActivateCustomResource
    Properties:
      Content: |-
        {
          "ec2_attributes": {
            "allowed_images_settings": {
              "state": {
                "@@assign": "enabled"
              },
              "image_criteria": {
                "criteria_1": {
                  "allowed_image_providers": {
                    "@@assign": [
                      "amazon",
                      "aws_marketplace",
                      "aws_backup_vault"
                    ]
                  }
                }
              }
            },
            "image_block_public_access": {
              "state": {
                "@@assign": "block_new_sharing"
              }
            },
            "instance_metadata_defaults": {
              "http_tokens": {
                "@@assign": "required"
              },
              "http_put_response_hop_limit": {
                "@@assign": 2
              },
              "http_endpoint": {
                "@@assign": "enabled"
              },
              "instance_metadata_tags": {
                "@@assign": "enabled"
              }
            },
            "serial_console_access": {
              "status": {
                "@@assign": "disabled"
              }
            },
            "snapshot_block_public_access": {
              "state": {
                "@@assign": "block_all_sharing"
              }
            },
            "vpc_block_public_access": {
              "internet_gateway_block": {
                "mode": {
                  "@@assign": "off"
                },
                "exclusions_allowed": {
                  "@@assign": "disabled"
                }
              }
            }
          }
        }
      Description: Enforce strong security practices
      Name: RootPolicy
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rRootDeclarativePolicyEC2
      TargetIds:
        - !GetAtt rOrganization.RootId
      Type: DECLARATIVE_POLICY_EC2

  rRootAIOptOutPolicy:
    Type: "AWS::Organizations::Policy"
    DependsOn: rActivateCustomResource
    Properties:
      Content: |-
        {
          "services": {
            "@@operators_allowed_for_child_policies": ["@@none"],
            "default": {
              "@@operators_allowed_for_child_policies": ["@@none"],
              "opt_out_policy": {
                "@@operators_allowed_for_child_policies": ["@@none"],
                "@@assign": "optOut"
              }
            }
          }
        }
      Description: Opt-out of AI service data collection
      Name: RootPolicy
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rRootAIOptOutPolicy
      # TargetIds:
      #  - !GetAtt rOrganization.RootId
      Type: AISERVICES_OPT_OUT_POLICY

  rExceptionsOu:
    Type: "AWS::Organizations::OrganizationalUnit"
    Properties:
      Name: Exceptions
      ParentId: !GetAtt rOrganization.RootId

  rInfrastructureOu:
    Type: "AWS::Organizations::OrganizationalUnit"
    Properties:
      Name: Infrastructure
      ParentId: !GetAtt rOrganization.RootId

  rSecurityOu:
    Type: "AWS::Organizations::OrganizationalUnit"
    Properties:
      Name: !Ref pSecurityOuName
      ParentId: !GetAtt rOrganization.RootId

  rSandboxOu:
    Type: "AWS::Organizations::OrganizationalUnit"
    Properties:
      Name: !Ref pSandboxOuName
      ParentId: !GetAtt rOrganization.RootId

  rWorkloadsOu:
    Type: "AWS::Organizations::OrganizationalUnit"
    Properties:
      Name: Workloads
      ParentId: !GetAtt rOrganization.RootId

  rNonProdOu:
    Type: "AWS::Organizations::OrganizationalUnit"
    Properties:
      Name: NonProd
      ParentId: !Ref rWorkloadsOu

  rProdOu:
    Type: "AWS::Organizations::OrganizationalUnit"
    Properties:
      Name: Prod
      ParentId: !Ref rWorkloadsOu

  rEmergencyAccessGroup:
    Type: "AWS::IAM::Group"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Ignoring explicit group name"
    Properties:
      GroupName: EmergencyAccess

  rEmergencyAccessOpsUser:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - !Ref rEmergencyAccessGroup
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rEmergencyAccessOpsUser
      UserName: EmergencyAccess_Ops
  
  rEmergencyAccessOpsPolicy:
    Type: "AWS::IAM::UserPolicy"
    Properties:
      PolicyName: EmergencyAccessOpsPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Resource: !Sub "arn:${AWS::Partition}:iam::*:role/EmergencyAccess_Ops"
      UserName: !Ref rEmergencyAccessOpsUser

  rEmergencyAccessReadOnlyUser:
    Type: "AWS::IAM::User"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F2000
            reason: "Ignoring no groups"
    Properties:
      Groups:
        - !Ref rEmergencyAccessGroup
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rEmergencyAccessReadOnlyUser
      UserName: EmergencyAccess_RO

  rEmergencyAccessReadOnlyPolicy:
    Type: "AWS::IAM::UserPolicy"
    Properties:
      PolicyName: EmergencyAccessReadOnlyPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Resource: !Sub "arn:${AWS::Partition}:iam::*:role/EmergencyAccess_RO"
      UserName: !Ref rEmergencyAccessReadOnlyUser

  rFunctionLogGroup:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "Ignoring KMS key"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rFunction}"
      RetentionInDays: 3

  rFunctionRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Ignoring wildcard policy"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub "lambda.${AWS::URLSuffix}"
          Action: "sts:AssumeRole"
          Condition:
            StringEquals:
              "aws:SourceAccount": !Ref "AWS::AccountId"
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      Policies:
        - PolicyName: OrganizationAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:ActivateOrganizationsAccess"
                  - "cloudformation:DeactivateOrganizationsAccess"
                  - "cloudformation:DescribeOrganizationsAccess"
                  - "iam:DisableOrganizationsRootCredentialsManagement"
                  - "iam:DisableOrganizationsRootSessions"
                  - "iam:EnableOrganizationsRootCredentialsManagement"
                  - "iam:EnableOrganizationsRootSessions"
                  - "organizations:ListRoots"
                  - "organizations:EnablePolicyType"
                  - "organizations:DisablePolicyType"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:GetRole"
                  - "iam:DeleteServiceLinkedRole"
                  - "iam:GetServiceLinkedRoleDeletionStatus"
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/stacksets.cloudformation.amazonaws.com/AWSServiceRoleForCloudFormationStackSetsOrgAdmin*"
              - Effect: Allow
                Action: "iam:GetRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*AWSServiceRoleForCloudFormationStackSetsOrgAdmin*"
              - Effect: Allow
                Action:
                  - "organizations:EnableAWSServiceAccess"
                  - "organizations:DisableAWSServiceAccess"
                Resource: "*"
                Condition:
                  StringEquals:
                    "organizations:ServicePrincipal":
                      - "member.org.stacksets.cloudformation.amazonaws.com"
                      - "iam.amazonaws.com"
              - Effect: Allow
                Action: "iam:CreateServiceLinkedRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/stacksets.cloudformation.amazonaws.com/AWSServiceRoleForCloudFormationStackSetsOrgAdmin*"
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rFunctionRole

  rCloudWatchLogsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !GetAtt rFunctionLogGroup.Arn
      Roles:
        - !Ref rFunctionRole

  rFunction:
    Type: "AWS::Serverless::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "Ignoring CloudWatch"
          - id: W89
            reason: "Ignoring VPC"
          - id: W92
            reason: "Ignoring Reserved Concurrency"
    Properties:
      Architectures:
        - x86_64  # can't use ARM here due to Github Actions availability
      CodeUri: ./src/activation_lambda
      Description: "DO NOT DELETE - Organization Activation Function"
      Environment:
        Variables:
          ROOT_ID: !GetAtt rOrganization.RootId
      Handler: index.handler
      MemorySize: 1024  # megabytes
      PropagateTags: true
      Role: !GetAtt rFunctionRole.Arn
      Runtime: python3.13
      Timeout: 20  # seconds

  rActivateCustomResource:
    Type: "AWS::CloudFormation::CustomResource"
    DependsOn:
      - rOrganization
      - rCloudWatchLogsPolicy
    Properties:
      ServiceTimeout: 15  # seconds
      ServiceToken: !GetAtt rFunction.Arn

  rCloudFormationStackSetAdminRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Ignoring explicit role name"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "cloudformation.amazonaws.com"
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref "AWS::AccountId"
              ArnLike:
                "aws:SourceArn": !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stackset/*"
      Description: !Sub "DO NOT DELETE - Used by CloudFormation StackSets. Created by CloudFormation ${AWS::StackId}"
      Policies:
        - PolicyName: StackSetAdministration
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/AWSCloudFormationStackSetExecutionRole"
      RoleName: AWSCloudFormationStackSetAdministrationRole
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rCloudFormationStackSetAdminRole

  rRoleStackSet:
    Type: "AWS::CloudFormation::StackSet"
    DependsOn: rActivateCustomResource
    Properties:
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: false
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      Description: StackSet to deploy IAM roles to member accounts
      # ExecutionRoleName not supported on SERVICE_MANAGED
      OperationPreferences:
        FailureToleranceCount: 1
        MaxConcurrentPercentage: 100
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: pManagementAccountId
          ParameterValue: !Ref "AWS::AccountId"
        - ParameterKey: pDeveloperPrefix
          ParameterValue: !Ref pDeveloperPrefix
        - ParameterKey: pCloudFormationRoleName
          ParameterValue: !Ref pCloudFormationRoleName
        - ParameterKey: pServiceCatalogRoleName
          ParameterValue: !Ref pServiceCatalogRoleName
      PermissionModel: SERVICE_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            OrganizationalUnitIds:
              - !GetAtt rOrganization.RootId
          Regions:
            - !Ref "AWS::Region"  # single region only for the IAM roles
      StackSetName: AWSPlatform-BASELINE-ROLES
      TemplateURL: ./src/stackset_roles/template.yml
  
  rParameterStackSet:
    Type: "AWS::CloudFormation::StackSet"
    DependsOn: rActivateCustomResource
    Properties:
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: false
      Description: StackSet to deploy SSM parameters to member accounts
      # ExecutionRoleName not supported on SERVICE_MANAGED
      OperationPreferences:
        FailureToleranceCount: 1
        MaxConcurrentPercentage: 100
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: pManagementAccountId
          ParameterValue: !Ref "AWS::AccountId"
        - ParameterKey: pOrganizationId
          ParameterValue: !GetAtt rOrganization.Id
        - ParameterKey: pCloudFormationRoleName
          ParameterValue: !Ref pCloudFormationRoleName
        - ParameterKey: pServiceCatalogRoleName
          ParameterValue: !Ref pServiceCatalogRoleName
      PermissionModel: SERVICE_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            OrganizationalUnitIds:
              - !GetAtt rOrganization.RootId
          Regions: !Ref pRegions
      StackSetName: AWSPlatform-BASELINE-PARAMETERS
      TemplateURL: ./src/stackset_parameters/template.yml
  
  rAccountManagerPermissionSet:
    Type: "AWS::SSO::PermissionSet"
    Condition: cHasInstanceArn
    Properties:
      Description: Access to Billing and Cost Explorer
      InstanceArn: !Ref pInstanceArn
      ManagedPolicies:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/job-function/Billing"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CostOptimizationHubReadOnlyAccess"
      Name: AccountManager
      RelayStateType: https://console.aws.amazon.com/costmanagement/home
      SessionDuration: PT8H
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rAccountManagerPermissionSet
  
  rAdministratorPermissionSet:
    Type: "AWS::SSO::PermissionSet"
    Condition: cHasInstanceArn
    Properties:
      Description: RESTRICTED - Highly priviledged administrator access
      InstanceArn: !Ref pInstanceArn
      ManagedPolicies:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      Name: RESTRICTED-AdministratorAccess
      SessionDuration: PT1H
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rAdministratorPermissionSet
  
  rShellAccessPermissionSet:
    Type: "AWS::SSO::PermissionSet"
    Condition: cHasInstanceArn
    Properties:
      Description: Command-line shell access to EC2 instances
      InlinePolicy: !Sub |-
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ssm:SendCommand",
                "ssm:StartSession"
              ],
              "Resource": [
                "arn:${AWS::Partition}:ec2:*:*:instance/*",
                "arn:${AWS::Partition}:ssm:*:*:document/SSM-SessionManagerRunShell",
                "arn:${AWS::Partition}:ssm:*:*:document/AWS-StartPortForwardingSession",
                "arn:${AWS::Partition}:ssm:*:*:document/AWS-StartPortForwardingSessionToRemoteHost"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:ResumeSession",
                "ssm:TerminateSession"
              ],
              "Resource": "arn:${AWS::Partition}:ssm:*:*:session/*",
              "Condition": {
                "StringLike": {
                  "ssm:resourceTag/aws:ssmmessages:session-id": "${!aws:userid}"
                }
              }
            }
          ]
        }
      InstanceArn: !Ref pInstanceArn
      Name: ShellAccess
      SessionDuration: PT8H
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rShellAccessPermissionSet

  rDeveloperPermissionSet:
    Type: "AWS::SSO::PermissionSet"
    Condition: cHasInstanceArn
    Properties:
      Description: Access to provision resources through CloudFormation
      InlinePolicy: !Sub |-
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": "arn:${AWS::Partition}:iam::*:role/${pCloudFormationRoleName}",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}",
                  "iam:PassedToService": "cloudformation.${AWS::URLSuffix}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:ContinueUpdateRollback",
                "cloudformation:CreateChangeSet",
                "cloudformation:CreateStack",
                "cloudformation:DeleteStack",
                "cloudformation:RollbackStack",
                "cloudformation:UpdateStack"
              ],
              "Resource": "arn:${AWS::Partition}:cloudformation:*:*:stack/${pDeveloperPrefix}*",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}"
                },
                "ArnLike": {
                  "cloudformation:RoleArn": "arn:${AWS::Partition}:iam::*:role/${pCloudFormationRoleName}"
                },
                "Null": {
                  "cloudformation:ImportResourceTypes": true
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:CancelUpdateStack",
                "cloudformation:DeleteChangeSet",
                "cloudformation:DetectStackDrift",
                "cloudformation:DetectStackResourceDrift",
                "cloudformation:ExecuteChangeSet",
                "cloudformation:TagResource",
                "cloudformation:UntagResource",
                "cloudformation:UpdateTerminationProtection"
              ],
              "Resource": "arn:${AWS::Partition}:cloudformation:*:*:stack/${pDeveloperPrefix}*",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:CreateUploadBucket",
                "cloudformation:ValidateTemplate",
                "cloudformation:EstimateTemplateCost"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": "s3:CreateBucket",
              "Resource": "arn:${AWS::Partition}:s3:::cf-templates-*",
              "Condition": {
                "ForAnyValue:StringEquals": {
                  "aws:CalledVia": "cloudformation.${AWS::URLSuffix}"
                },
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": "s3:PutObject",
              "Resource": "arn:${AWS::Partition}:s3:::cf-templates-*/*",
              "Condition": {
                "StringEquals": {
                  "s3:ResourceAccount": "${!aws:PrincipalAccount}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:SendCommand",
                "ssm:StartSession"
              ],
              "Resource": [
                "arn:${AWS::Partition}:ec2:*:*:instance/*",
                "arn:${AWS::Partition}:ssm:*:*:document/SSM-SessionManagerRunShell",
                "arn:${AWS::Partition}:ssm:*:*:document/AWS-StartPortForwardingSession",
                "arn:${AWS::Partition}:ssm:*:*:document/AWS-StartPortForwardingSessionToRemoteHost"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:ResumeSession",
                "ssm:TerminateSession"
              ],
              "Resource": "arn:${AWS::Partition}:ssm:*:*:session/*",
              "Condition": {
                "StringLike": {
                  "ssm:resourceTag/aws:ssmmessages:session-id": "${!aws:userid}"
                }
              }
            }
          ]
        }
      InstanceArn: !Ref pInstanceArn
      ManagedPolicies:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSServiceCatalogEndUserFullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSBillingReadOnlyAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSSupportAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/job-function/ViewOnlyAccess"
      Name: Developer
      SessionDuration: PT8H
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rDeveloperPermissionSet
  
  rSupportPermissionSet:
    Type: "AWS::SSO::PermissionSet"
    Condition: cHasInstanceArn
    Properties:
      Description: Access to production accounts for troubleshooting and support
      InlinePolicy: !Sub |-
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": "arn:${AWS::Partition}:iam::*:role/${pCloudFormationRoleName}",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}",
                  "iam:PassedToService": "cloudformation.${AWS::URLSuffix}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": "cloudformation:ContinueUpdateRollback",
              "Resource": "arn:${AWS::Partition}:cloudformation:*:*:stack/${pDeveloperPrefix}*",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}"
                },
                "ArnLike": {
                  "cloudformation:RoleArn": "arn:${AWS::Partition}:iam::*:role/${pCloudFormationRoleName}"
                },
                "Null": {
                  "cloudformation:ImportResourceTypes": true
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": "cloudformation:CancelUpdateStack",
              "Resource": "arn:${AWS::Partition}:cloudformation:*:*:stack/${pDeveloperPrefix}*",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:SendCommand",
                "ssm:StartSession"
              ],
              "Resource": [
                "arn:${AWS::Partition}:ec2:*:*:instance/*",
                "arn:${AWS::Partition}:ssm:*:*:document/SSM-SessionManagerRunShell",
                "arn:${AWS::Partition}:ssm:*:*:document/AWS-StartPortForwardingSession",
                "arn:${AWS::Partition}:ssm:*:*:document/AWS-StartPortForwardingSessionToRemoteHost"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": "${!aws:PrincipalAccount}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:ResumeSession",
                "ssm:TerminateSession"
              ],
              "Resource": "arn:${AWS::Partition}:ssm:*:*:session/*",
              "Condition": {
                "StringLike": {
                  "ssm:resourceTag/aws:ssmmessages:session-id": "${!aws:userid}"
                }
              }
            }            
          ]
        }
      InstanceArn: !Ref pInstanceArn
      ManagedPolicies:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSBillingReadOnlyAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSSupportAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/job-function/ViewOnlyAccess"
      Name: Support
      RelayStateType: https://support.console.aws.amazon.com/support/home
      SessionDuration: PT8H
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: rSupportPermissionSet

Outputs:
  oOrganizationId:
    Description: Organization ID
    Value: !GetAtt rOrganization.Id
  oInstanceArn:
    Description: IAM Identity Center Instance Arn
    Value: !Ref pInstanceArn
    Condition: cHasInstanceArn